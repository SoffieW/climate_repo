library(dplyr)
library(ggplot2)
library(tidyr)
library(GGally)
library(tsibble)
library(feasts)
library(lubridate)
# read in timeseries file from interim data directory
path = file.path(getwd(), '..', '..', '..', 'data', 'interim', 'df_main.csv')
print(path)
df = read.csv(path)
output_path = file.path(getwd(), '..', '..', '..', 'reports', 'figures')
# turns csv into tsibble, with index: Year-Month
df %>%
mutate(Date = yearmonth(Year.Month)) %>%
as_tsibble(index = Date) -> temps
# run this code to generate seasonal plot
temps %>%
gg_season(Value)
# run this code to generate visual: timeseries plot
temps %>%
autoplot(Value)
# run this code to generate visual: lag plots
temps %>%
filter(year(Date) >=2015) %>%
gg_lag(Value, geom= "point", lags = 1:12) +
labs(x = "lag(Temp (\u00B0C), k)", y= "Temp (\u00B0C)") +
ggtitle("Lag plots of Global Mean Monthly Temp")
# run this code to generate visual: autocorrelation plot
temps %>%
ACF(Value, lag_max = 120) %>%
autoplot() +
ggtitle("Autocorrelation of Temperature over 60 Months")
# run this code to generate visual: timeseries plot
temps %>%
autoplot(Value)
# run this code to generate seasonal plot
temps %>%
filter(year(Date) >=2014)
gg_season(Value)
# run this code to generate seasonal plot
temps %>%
filter(year(Date) >=2014) %>%
gg_season(Value)
# run this code to generate visual: timeseries plot
temps %>%
filter(year(Date) >=2014) %>%
autoplot(Value)
# run this code to generate visual: timeseries plot
temps %>%
filter(year(Date) >=2020) %>%
autoplot(Value)
# run this code to generate visual: timeseries plot
temps %>%
filter(year(Date) >=2015) %>%
autoplot(Value)
